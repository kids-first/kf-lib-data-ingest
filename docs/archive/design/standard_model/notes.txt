
-- Ambiguous Data --
When transforming into target model, we will have a schema which defines and
enforces relationships between concepts.
An attribute of a child concept is attached to a parent concept
Example:
- Participant P1 has biospecimen B1, B2
- Property BIOSPECIMEN.TISSUE_TYPE.Blood is attached to P1


-- Invalid Data --
When transforming into target model, we will have a schema which defines and
enforces relationships between concepts. If child concept is connected to more
than one parent concept, this is invalid.
BIOSPECIMEN is connected to more than one[PARTICIPANT, PARTICIPANT-predecessors]
This should not be allowed and should raise an exception (maybe)

-- Identifier Properties --
When transforming into target model, we will have a schema which defines and
enforces relationships between concepts.
Any child concept can unambiguously identify a parent concept

-- Building Edges --
For ID Nodes:
    Collect ID nodes in a row
    Iterate over ID nodes pairwise
    Check graph - does a path exist from A to B already?
    - Yes - do nothing
    - No - Create an undirected edge from A to B
For property nodes:
    If the concept for this property exists in the row, attach it to each of
    the ID nodes.

-- Searching Properties --
-- Schema --
    FAMILY
    -- PARTICIPANT
        -- BIOSPECIMEN
            -- GENOMIC_FILE
        -- DIAGNOSIS
        -- PHENOTYPE
        -- OUTCOME

    SEQUENCING_EXPERIMENT
    -- GENOMIC_FILE

-- Restrictions --
- We need to know which concept connections could create undesirable
connections.
Example: Family can connect 1 or more participants and/or participant
child concepts.

When searching for a property, P of concept C1:
Do BFS in search for P:
    For neighbor in all neighbors of C1:
        Evaluate whether to add neighbor to list of nodes to traverse:
            Is neighbor a predecessor of C1 and is there a restriction for it?
                No - it is valid
                Yes - check whether it is valid
                    If neighbor is connected to any other nodes in the set
                    [C, C-descendants (children)] the neighbor is invalid
                    else the neighbor is valid

Example:
Search for property PARTICIPANT.AGE.30 of participant P1.
Do BFS in search of PARTICIPANT.AGE.30:
    For neighbor in all neighbors of P1:
        Is neighbor concept any of participant's predecessor concepts [Family]:
            No - it is valid
            Yes - check whether it is valid
                If neighbor (i.e. Family) is connected to any other nodes
                in the set [P, P-descendants (children)] the neighbor is invalid
                else the neighbor is valid

----------------------------------------------
TODO - Transformation and loading w target api config
----------------------------------------------
Given a target concept from target_api_config:

'target_concept': {
    'standard_concept': CONCEPT.INVESTIGATOR,
    'properties': {
        'external_id': CONCEPT.INVESTIGATOR.ID,
        'name': CONCEPT.INVESTIGATOR.NAME,
        'institution': CONCEPT.INVESTIGATOR.INSTITUTION
    },
    'links': {
        'foo_id': CONCEPT.FOO.ID,
        'bar_id': CONCEPT.BAR.ID
    }
}

During transformation before attribute searching begins,
we will inject new keys into the target_concept dict:

'target_concept': {
    'standard_concept': CONCEPT.INVESTIGATOR <-- Remove and replace w below
    'id': CONCEPT.INVESTIGATOR.ID, <-- injected based on value of standard_concept
    'properties': {
        'id': CONCEPT.INVESTIGATOR.TARGET_SERVICE_ID <-- injected based on standard_concept
                                                            and value of target_service_entity_id
        'foo_id': CONCEPT.FOO.TARGET_SERVICE_ID <-- injected based on presence in links
        'bar_id': CONCEPT.BAR.TARGET_SERVICE_ID <-- injected based on presence in links
        'external_id': CONCEPT.INVESTIGATOR.ID,
        'name': CONCEPT.INVESTIGATOR.NAME,
        'institution': CONCEPT.INVESTIGATOR.INSTITUTION
    },
    'links': {
        'foo_id': CONCEPT.FOO.ID,
        'bar_id': CONCEPT.BAR.ID
    }
}

Now run attribute search for all attributes in 'id', 'properities', 'links' in
concept graph. Now we have values for all attributes/properties.

During loading stage:

For keys in 'id' and 'links', check to see whether that key exists in properties.
If it does, then take the value for that key from the 'properties' dict.
If it does not, then take the value for that key from the 'id' or 'links'
dicts AND do an ID translation (external_id --> target service id)

This process allows us to use target service ids in source data or external_ids.
In the latter case we must do an extra step to translate to target service ids.
